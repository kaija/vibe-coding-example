version: '3.8'

services:
  # PostgreSQL Database (same as production)
  postgres:
    image: postgres:15
    container_name: note-api-postgres-dev
    environment:
      POSTGRES_DB: note_api
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d note_api"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - note-api-network

  # Rust Backend API with volume mounting for development
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: note-api-backend-dev
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/note_api
      JWT_SECRET: dev-jwt-secret-key-for-development-only
      ROCKET_PORT: 8000
      ROCKET_ADDRESS: 0.0.0.0
      RUST_LOG: debug
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - cargo_cache:/usr/local/cargo/registry
      - target_cache:/app/target
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - note-api-network
    restart: unless-stopped
    command: ["cargo", "run"]

  # Frontend with volume mounting for development
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: note-api-frontend-dev
    ports:
      - "8080:80"
    volumes:
      # Mount frontend files for development
      - ./frontend/index.html:/usr/share/nginx/html/index.html:ro
      - ./frontend/styles.css:/usr/share/nginx/html/styles.css:ro
      - ./frontend/app.js:/usr/share/nginx/html/app.js:ro
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
    networks:
      - note-api-network
    restart: unless-stopped

volumes:
  postgres_dev_data:
    driver: local
  cargo_cache:
    driver: local
  target_cache:
    driver: local

networks:
  note-api-network:
    driver: bridge